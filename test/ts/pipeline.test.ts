import { defineAbility } from '@casl/ability';
import * as chai from 'chai';
import * as spies from 'chai-spies';
import * as express from 'express';
import * as supertest from 'supertest';
import { API } from '../../dist/api';
import { PipelineOperation, PipelineOptions, SimplePipelineOperation } from '../../dist/pipeline';
import { Resource } from '../../dist/resource';

chai.use(spies);

describe('pipeline', function () {
  describe('SimplePipelineOperation', function () {
    const port = 9876;
    const host = 'localhost:' + port;
    const basePath = 'http://' + host;
    const request = supertest(basePath);
    const app = express();
    let server;

    class API1 extends API {
      initSecurity(req, res, next) {
        req.ability = defineAbility((can, cannot) => {
          can('manage', 'Test', ['a', 'b'], { c: 1 });
        });
        next();
      }
    }
    const api = new API1();
    let r = new Resource({ name: 'Test' });
    r.addOperation(
      new SimplePipelineOperation(
        (job) => {
          job.data = [
            { a: 'AAA', b: 'BBB', c: 1, d: true },
            { a: 'XXX', b: 'YYY', c: 1, d: false },
            { a: 'QQQ', b: 'RRR', c: 2, d: true },
            { a: 'MMM', b: 'NNN', c: 3, d: false },
          ];
          return Promise.resolve(job);
        },
        r,
        '/op1',
        'get',
        'op1'
      )
    );
    class Op2 extends PipelineOperation {
      get options(): PipelineOptions {
        return {
          filter: {
            fields: false,
            data: false,
          },
        };
      }
      async runOperation(job) {
        job.data = [
          { a: 'AAA', b: 'BBB', c: 1, d: true },
          { a: 'XXX', b: 'YYY', c: 1, d: false },
          { a: 'QQQ', b: 'RRR', c: 2, d: true },
          { a: 'MMM', b: 'NNN', c: 3, d: false },
        ];
        return Promise.resolve(job);
      }
    }
    r.addOperation(new Op2(r, '/op2', 'get', 'op2'));

    api.addResource(r);

    before(function () {
      return api.router().then((router) => {
        app.use(router);
        server = app.listen(port);
      });
    });

    after(function () {
      if (server) {
        server.close();
      }
    });

    it('should return the data generated by runOperation, filtered by ability', function () {
      return request
        .get('/tests/op1')
        .expect(200)
        .expect('Content-Type', /json/)
        .then(({ body: data }) => {
          data.should.deep.equal([
            { a: 'AAA', b: 'BBB' },
            { a: 'XXX', b: 'YYY' },
          ]);
        });
    });
    it('should return the data generated by runOperation, unfiltered by ability', function () {
      return request
        .get('/tests/op2')
        .expect(200)
        .expect('Content-Type', /json/)
        .then(({ body: data }) => {
          data.should.deep.equal([
            { a: 'AAA', b: 'BBB', c: 1, d: true },
            { a: 'XXX', b: 'YYY', c: 1, d: false },
            { a: 'QQQ', b: 'RRR', c: 2, d: true },
            { a: 'MMM', b: 'NNN', c: 3, d: false },
          ]);
        });
    });
  });
});
